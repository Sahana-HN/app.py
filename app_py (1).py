# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kQdPYK0t7OBZFQEMjytf2yXwYzZwMDlE
"""

# Save the trained model to a .pkl file
with open('churn_random_forest_model.pkl', 'wb') as file:
    pickle.dump(model, file)

import streamlit as st
import joblib
import pandas as pd
import warnings
warnings.filterwarnings("ignore", message="missing ScriptRunContext")

# Load the trained Random Forest model
model = joblib.load("churn_random_forest_model.pkl")

# Define the input features
input_features = ['state', 'account.length', 'voice.messages', 'intl.mins', 'intl.calls',
                  'day.mins', 'day.calls', 'eve.mins', 'eve.calls', 'night.mins',
                  'night.calls', 'voice.plan_yes', 'intl.plan_yes']

# Streamlit app title
st.title("Customer Churn Prediction")

# User inputs for each feature
state = st.selectbox("State", list(range(52)), help="Select the state (0 to 51) representing each state including District of Columbia")
account_length = st.number_input("Account Length (days)", min_value=1, max_value=500, value=100)
voice_messages = st.number_input("Number of Voice Messages", min_value=0, max_value=100, value=10)
intl_mins = st.number_input("International Minutes", min_value=0.0, max_value=100.0, value=10.0)
intl_calls = st.number_input("Number of International Calls", min_value=0, max_value=20, value=5)
day_mins = st.number_input("Day Minutes", min_value=0.0, max_value=500.0, value=180.0)
day_calls = st.number_input("Day Calls", min_value=0, max_value=200, value=100)
eve_mins = st.number_input("Evening Minutes", min_value=0.0, max_value=500.0, value=150.0)
eve_calls = st.number_input("Evening Calls", min_value=0, max_value=200, value=100)
night_mins = st.number_input("Night Minutes", min_value=0.0, max_value=500.0, value=200.0)
night_calls = st.number_input("Night Calls", min_value=0, max_value=200, value=100)
voice_plan_yes = st.selectbox("Voice Plan (Yes=1, No=0)", [0, 1])
intl_plan_yes = st.selectbox("International Plan (Yes=1, No=0)", [0, 1])

# Organize user inputs into a dataframe for model prediction
user_data = pd.DataFrame([[state, account_length, voice_messages, intl_mins, intl_calls,
                           day_mins, day_calls, eve_mins, eve_calls, night_mins,
                           night_calls, voice_plan_yes, intl_plan_yes]], columns=input_features)

# Display prediction results
    if st.button("Predict"):
        prediction = model.predict(input_features)
        prediction_text = "will churn" if prediction[0] == 1 else "will not churn"
        st.write(f"The model predicts that this customer {prediction_text}.")